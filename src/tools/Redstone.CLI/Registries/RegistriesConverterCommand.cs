using McMaster.Extensions.CommandLineUtils;
using Redstone.CLI.Registries.Converters;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text.Json;
using Redstone.Common.Extensions;

namespace Redstone.CLI.Registries
{
    [Command("convert", Description = "Converts a registry entry.")]
    public class RegistriesConverterCommand
    {
        [Required]
        [Argument(0, Description = "Minecraft registries JSON file path.")]
        public string RegistriesFilePath { get; set; } = null!;

        [Required]
        [Argument(1, Description = "The minecraft registry entry name.")]
        public string RegistryEntry { get; } = null!;

        [Option(CommandOptionType.SingleValue,
            ShortName = "t",
            LongName = "type",
            Description = "Defines the registry converter type.")]
        public RegistriesConverterType? Type { get; set; } = RegistriesConverterType.CSharpEnum;

        [Option(CommandOptionType.SingleValue,
            ShortName = "o",
            LongName = "output",
            Description = "Specifies the output file path where the registry output will be written.")]
        public string? Output { get; set; } = null!;

        [Required]
        [Option(CommandOptionType.SingleValue,
            ShortName = "n",
            LongName = "name",
            Description = "The converted operation name. When type set to 'CSharpEnum', 'CSharpConstants' or 'JavaEnum', the name represent the member name.")]
        public string Name { get; set; } = null!;

        [Option(CommandOptionType.SingleValue,
            ShortName = "ns",
            LongName = "namespace")]
        public string? Namespace { get; set; } = null!;

        public void OnExecute()
        {
            if (string.IsNullOrEmpty(RegistriesFilePath))
            {
                throw new InvalidOperationException("Invalid registries file path.");
            }

            if (!File.Exists(RegistriesFilePath))
            {
                throw new FileNotFoundException("Failed to find registries file.", RegistriesFilePath);
            }

            if (string.IsNullOrEmpty(Name))
            {
                throw new InvalidOperationException($"Name is not specified. Please specify a valid name.");
            }

            JsonDocument jsonDocument = JsonDocument.Parse(File.OpenRead(RegistriesFilePath));
            JsonElement entriesElement = jsonDocument.RootElement.GetProperty(RegistryEntry).GetProperty("entries");

            IDictionary<string, int> registryValues = entriesElement.EnumerateObject()
                .ToDictionary(
                    x => x.Name.Replace("minecraft:", "").Trim().ToPascalCase(),
                    x => x.Value.GetProperty("protocol_id").GetInt32());

            IConverter codeConverter = GetConverter(registryValues);

            string generatedCode = codeConverter.Convert();
            string generatedHeader = @$"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Redstone.CLI tool.
//     Version: {Assembly.GetExecutingAssembly().GetName().Version}
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

";
            string outputFile = GenerateOutputFile();

            File.WriteAllText(outputFile, generatedHeader + generatedCode);
        }

        private IConverter GetConverter(IDictionary<string, int> values)
        {
            return Type switch
            {
                RegistriesConverterType.CSharpEnum => new CSharpEnumConverter(Name, values, Namespace),
                _ => throw new NotImplementedException()
            };
        }

        private string GenerateOutputFile()
        {
            string extension = Type switch
            {
                RegistriesConverterType.CSharpEnum => "cs",
                RegistriesConverterType.CSharpConstants => "cs",
                RegistriesConverterType.JavaEnum => "java",
                _ => throw new NotImplementedException()
            };

            return string.IsNullOrEmpty(Output) ? 
                Path.Combine(Environment.CurrentDirectory, $"{Name}.generated.{extension}") : 
                Output;
        }
    }
}
